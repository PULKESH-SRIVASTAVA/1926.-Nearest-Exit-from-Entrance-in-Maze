class Solution {
    public static int[][] directions={{0,1},{0,-1},{1,0},{-1,0}};
    public int nearestExit(char[][] maze, int[] entrance) {
        if(maze==null || maze.length==0)
            return 0;
        int n=maze.length;
        int m=maze[0].length;
        boolean[][] visited=new boolean[n][m];
        Queue<int[]> qq=new LinkedList();
        qq.offer(new int[]{entrance[0],entrance[1]});
        visited[entrance[0]][entrance[1]]=true;
        int ans=0;
        while(!qq.isEmpty()){
            int size=qq.size();
            ans++;
            for(int i=0;i<size;i++){
                int[] pp=qq.poll();
                int x=pp[0];
                int y=pp[1];
                for(int[] dir:directions){
                    int u=x+dir[0];
                    int v=y+dir[1];
                    if(u<0 || u>maze.length-1 || v<0 || v>maze[0].length-1)continue;
                    if(visited[u][v] || maze[u][v]=='+')continue;
                    if(u==0 || u==n-1 || v==0 || v==m-1)return ans;
                        qq.offer(new int[]{u,v});
                        visited[u][v]=true;
                    }
                }
            }
            
         return -1;
    }
}
